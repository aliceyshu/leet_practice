--
-- @lc app=leetcode id=1204 lang=mysql
--
-- [1204] Last Person to Fit in the Bus
--

-- @lc code=start
# Write your MySQL query statement below
with sorted_table AS(
    select *,sum(weight) over (order by turn) AS "Total Weight"
    from Queue
    order by turn)

select person_name
from sorted_table
where `Total Weight` <= 1000
order by turn desc
limit 1;

-- @lc code=end

/* Comment
代码的优缺点
1.优点：
逻辑清晰：你的解决方案很好地利用了窗口函数，准确地实现了需求。每个步骤的意图都很明确，
对于面试官来说是可读性很强的解决方案。
窗口函数使用：SUM(weight) OVER (ORDER BY turn) 是一个经典的窗口函数应用，展示了你
对窗口函数的理解，这在技术面试中是一个加分项。
边界处理：你的查询会自动处理电梯总重量超过1000的情况，返回最后一个符合条件的人。
2.缺点：
性能瓶颈：虽然 O(n log n) 的复杂度在中小规模的数据集上表现良好，但对于大规模数据集，
尤其是数据量非常大的情况下，排序操作会带来一定的性能问题。
不完全高效：WITH 子句生成的临时表 sorted_table 会保留所有行，但实际上你只关心最后
一个人。因此，可以优化为在计算累积重量时尽早停止。
一个可能的优化是通过一边扫描一边计算累积重量，并在总重量超过 1000 时停止处理，而不
是计算整个窗口函数的值再过滤。

面试表现评估
表现力：你展示了对 SQL 窗口函数和查询的熟练掌握，逻辑思维清晰。如果你能清楚地解释代码
的意图和每一步的作用，这是一个在面试中非常好的表现。
优化讨论：如果面试官提出优化方案的讨论，这是一个你可以进一步展示自己能力的机会。例如，
你可以提到目前的方案需要先计算整个窗口函数，然后再过滤和排序，可能并不高效，并提出
如何优化。
代码质量：代码整体上很整洁，并且选择了合适的工具（窗口函数）来解决问题。在技术面试中，
能够编写出清晰的 SQL 查询、有效地处理数据、并且能够考虑到极端情况，是一种很好的表现。

#改进方向：
1.提前停止：你可以通过逐步扫描并累积重量，一旦发现总重量超过 1000 就停止计算，这样
可以避免不必要的计算和排序。
2.提高效率：在较大数据集上，可以考虑通过减少排序的开销或使用索引等优化技术来提升性能。
*/
